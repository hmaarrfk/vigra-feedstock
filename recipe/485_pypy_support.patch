From 0499685b0906cc3535c509d718dfa199046de2d4 Mon Sep 17 00:00:00 2001
From: Mark Harfouche <mark.harfouche@gmail.com>
Date: Sun, 7 Feb 2021 16:06:05 -0500
Subject: [PATCH] Update CMake FindPython to obtain pypy support

---
 CMakeLists.txt                           |  12 +-
 azure-pipelines.yml                      |  35 ++++--
 config/FindVIGRANUMPY_DEPENDENCIES.cmake | 137 +++++------------------
 config/VIGRA_ADD_NUMPY_MODULE.cmake      |  17 ++-
 docsrc/CMakeLists.txt                    |   6 +-
 docsrc/credits_changelog.dxx             |  10 ++
 vigranumpy/test/CMakeLists.txt           |  21 ++--
 vigranumpy/test/test_arraytypes.py       |  29 +++--
 vigranumpy/test/vigranumpytest.cxx       |   4 +
 9 files changed, 117 insertions(+), 154 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 77597ba96..aa348f79a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 2.6)
+cmake_minimum_required(VERSION 3.12)
 
 ##################################################
 #
@@ -121,7 +121,7 @@ ENDIF()
 SET(DOXYGEN_SKIP_DOT TRUE)
 FIND_PACKAGE(Doxygen)
 
-FIND_PACKAGE(PythonInterp ${PYTHON_VERSION})
+FIND_PACKAGE(Python COMPONENTS Interpreter Development NumPy)
 
 ##################################################
 #
@@ -179,7 +179,7 @@ if(WITH_BOOST AND Boost_FOUND)
     # (default on Windows is a mangled name like 'boost_system-vc110-mt-1_51.lib')
     if((Boost_SYSTEM_LIBRARY MATCHES "boost_system\\.lib") OR
        (Boost_PYTHON_LIBRARY MATCHES "boost_python\\.lib") OR
-       (Boost_PYTHON_LIBRARY MATCHES "boost_python${PYTHON_VERSION_MAJOR}\\.lib"))
+       (Boost_PYTHON_LIBRARY MATCHES "boost_python${Python_VERSION_MAJOR}\\.lib"))
         set(Boost_MANGLED_NAMES 0)
         ADD_DEFINITIONS(-DBOOST_AUTO_LINK_NOMANGLE)
     else()
@@ -449,7 +449,7 @@ ENDIF()
 IF(WITH_VIGRANUMPY)
     IF(VIGRANUMPY_DEPENDENCIES_FOUND)
         MESSAGE( STATUS "  Using Python libraries: ${VIGRANUMPY_LIBRARIES}" )
-        MESSAGE( STATUS "  Using Numpy includes:   ${PYTHON_NUMPY_INCLUDE_DIR}" )
+        MESSAGE( STATUS "  Using Numpy includes:   ${Python_NumPy_INCLUDE_DIRS}" )
     ELSE()
         MESSAGE( STATUS "  Vigranumpy dependencies not found (vigranumpy disabled)" )
     ENDIF()
@@ -466,7 +466,7 @@ ELSE()
 ENDIF()
 
 MESSAGE( STATUS "  binaries will be generated in: ${CMAKE_CURRENT_BINARY_DIR}")
-IF(DOXYGEN_FOUND AND PYTHONINTERP_FOUND)
+IF(DOXYGEN_FOUND AND Python_Interpreter_FOUND)
     MESSAGE( STATUS "  manuals will be generated in: ${DOCDIR}")
 ENDIF()
 
@@ -481,7 +481,7 @@ else()
   MESSAGE( STATUS "  binaries will be installed at: ${CMAKE_INSTALL_PREFIX}/bin")
 endif()
 
-IF(DOXYGEN_FOUND AND PYTHONINTERP_FOUND)
+IF(DOXYGEN_FOUND AND Python_Interpreter_FOUND)
   MESSAGE( STATUS "  vigra manuals will be installed at: "
     "${CMAKE_INSTALL_PREFIX}/${DOCINSTALL}/vigra/index.html")
 ELSE()
diff --git a/azure-pipelines.yml b/azure-pipelines.yml
index 8e01d9853..55a3575df 100644
--- a/azure-pipelines.yml
+++ b/azure-pipelines.yml
@@ -28,8 +28,10 @@ jobs:
           sudo apt-get update || exit 1
           sudo apt-get --assume-yes install gcc-7 g++-7 || exit 1
           echo "Creating conda environment for Python $(PY_VERSION)" || exit 1
-          conda create --quiet --yes --mkdir --prefix $AGENT_WORKFOLDER/envs/vigra --channel conda-forge/label/gcc7 \
-                python=$(PY_VERSION) || exit 1
+          conda create --quiet --yes --mkdir \
+            --prefix $AGENT_WORKFOLDER/envs/vigra \
+            --channel conda-forge/label/gcc7 \
+            python=$(PY_VERSION) || exit 1
           echo "Activating conda environment" || exit 1
           source $CONDA/bin/activate $AGENT_WORKFOLDER/envs/vigra || exit 1
           echo "Installing prerequisites" || exit 1
@@ -38,8 +40,14 @@ jobs:
           mkdir build || exit 1
           cd build || exit 1
           echo "Starting cmake configuration" || exit 1
-          CC=gcc-7 CXX=g++-7 cmake .. -DCMAKE_BUILD_TYPE=Release -DTEST_VIGRANUMPY=1 -DAUTOEXEC_TESTS=0 \
-                -DDEPENDENCY_SEARCH_PREFIX="$CONDA_PREFIX" -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" || exit 1
+          CC=gcc-7 CXX=g++-7 cmake .. \
+            -DCMAKE_BUILD_TYPE=Release \
+            -DTEST_VIGRANUMPY=1 \
+            -DAUTOEXEC_TESTS=0 \
+            -DPython_FIND_VIRTUALENV=ONLY \
+            -DPython_ROOT_DIR="$CONDA_PREFIX" \
+            -DDEPENDENCY_SEARCH_PREFIX="$CONDA_PREFIX" \
+            -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" || exit 1
           echo "Compiling" || exit 1
           make check || exit 1
           echo "Running ctest" || exit 1
@@ -105,8 +113,14 @@ jobs:
           mkdir build || exit 1
           cd build || exit 1
           echo "Starting cmake configuration" || exit 1
-          cmake .. -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DTEST_VIGRANUMPY=1 -DAUTOEXEC_TESTS=0 \
-                -DDEPENDENCY_SEARCH_PREFIX="$CONDA_PREFIX" -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" || exit 1
+          cmake .. -G "Unix Makefiles" \
+                -DCMAKE_BUILD_TYPE=Release \
+                -DTEST_VIGRANUMPY=1 \
+                -DAUTOEXEC_TESTS=0 \
+                -DPython_FIND_VIRTUALENV=ONLY \
+                -DPython_ROOT_DIR="$CONDA_PREFIX" \
+                -DDEPENDENCY_SEARCH_PREFIX="$CONDA_PREFIX" \
+                -DCMAKE_PREFIX_PATH="$CONDA_PREFIX" || exit 1
           echo "Compiling" || exit 1
           make check || exit 1
           echo "Running ctest" || exit 1
@@ -157,8 +171,13 @@ jobs:
           echo Starting cmake configuration || exit 1
           mkdir build || exit 1
           cd build || exit 1
-          cmake .. -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Release -DTEST_VIGRANUMPY=1 -DAUTOEXEC_TESTS=0 ^
-                -DDEPENDENCY_SEARCH_PREFIX="%CONDA_PREFIX%\Library" -DCMAKE_PREFIX_PATH="%CONDA_PREFIX%\Library" || exit 1
+          cmake .. -G "NMake Makefiles" ^
+                -DCMAKE_BUILD_TYPE=Release ^
+                -DTEST_VIGRANUMPY=1 ^
+                -DAUTOEXEC_TESTS=0 ^
+                -DPython_EXECUTABLE:FILEPATH=%CONDA_PREFIX%\python.exe ^
+                -DDEPENDENCY_SEARCH_PREFIX="%CONDA_PREFIX%\Library" ^
+                -DCMAKE_PREFIX_PATH="%CONDA_PREFIX%\Library" || exit 1
           echo Compiling || exit 1
           nmake check || exit 1
           echo Running ctest || exit 1
diff --git a/config/FindVIGRANUMPY_DEPENDENCIES.cmake b/config/FindVIGRANUMPY_DEPENDENCIES.cmake
index f64a52d72..1564a18e9 100644
--- a/config/FindVIGRANUMPY_DEPENDENCIES.cmake
+++ b/config/FindVIGRANUMPY_DEPENDENCIES.cmake
@@ -2,87 +2,29 @@
 #
 MESSAGE(STATUS "Checking VIGRANUMPY_DEPENDENCIES")
 
-IF(NOT PYTHONINTERP_FOUND)
-    FIND_PACKAGE(PythonInterp ${PYTHON_VERSION})
+IF(NOT Python_Interpreter_FOUND)
+    FIND_PACKAGE(Python COMPONENTS Interpreter Development NumPy)
 ENDIF()
 
-IF(PYTHONINTERP_FOUND)
-
-    # Note:
-    #  'FIND_PACKAGE(PythonLibs)' is unreliable because results are often inconsistent
-    #  with the Python interpreter found previously (e.g. libraries or includes
-    #  from incompatible installations). Thus, we ask Python itself for the information.
-    #
+IF(Python_Interpreter_FOUND)
+    MESSAGE(STATUS "Using Python ${Python_VERSION} at ${Python_EXECUTABLE}")
+    MESSAGE(STATUS "Python_LIBRARIES ${Python_LIBRARIES}")
 
     ######################################################################
     #
     #      find Python prefix
     #
     ######################################################################
-    execute_process(COMMAND ${PYTHON_EXECUTABLE} -c
+    execute_process(COMMAND ${Python_EXECUTABLE} -c
                      "import sys; print(sys.exec_prefix)"
                       OUTPUT_VARIABLE PYTHON_PREFIX OUTPUT_STRIP_TRAILING_WHITESPACE)
-    execute_process(COMMAND ${PYTHON_EXECUTABLE} -c
-                     "import sys; print(sys.version.split()[0])"
-                      OUTPUT_VARIABLE PYTHON_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
-    execute_process(COMMAND ${PYTHON_EXECUTABLE} -c
-                     "import sys; print(sys.version_info[0])"
-                      OUTPUT_VARIABLE PYTHON_VERSION_MAJOR OUTPUT_STRIP_TRAILING_WHITESPACE)
-    execute_process(COMMAND ${PYTHON_EXECUTABLE} -c
-                     "import sys; print(sys.version_info[1])"
-                      OUTPUT_VARIABLE PYTHON_VERSION_MINOR OUTPUT_STRIP_TRAILING_WHITESPACE)
-
-    MESSAGE(STATUS "Using Python ${PYTHON_VERSION} at ${PYTHON_EXECUTABLE}")
-
-    ######################################################################
-    #
-    #      find Python includes
-    #
-    ######################################################################
-    execute_process(COMMAND ${PYTHON_EXECUTABLE} -c
-                    "from distutils.sysconfig import *; print(get_python_inc())"
-                    OUTPUT_VARIABLE PYTHON_INCLUDE OUTPUT_STRIP_TRAILING_WHITESPACE)
-    SET(PYTHON_INCLUDE_PATH ${PYTHON_INCLUDE}
-        CACHE PATH "Path to Python include files"
-        FORCE)
 
-    IF(PYTHON_INCLUDE_PATH)
-        MESSAGE(STATUS "Found Python includes:  ${PYTHON_INCLUDE_PATH}")
+    IF(Python_INCLUDE_DIRS)
+        MESSAGE(STATUS "Found Python includes:  ${Python_INCLUDE_DIRS}")
     ELSE()
         MESSAGE(STATUS "Could NOT find Python includes")
     ENDIF()
 
-    ######################################################################
-    #
-    #      find Python library
-    #
-    ######################################################################
-    IF(APPLE AND ${PYTHON_PREFIX} MATCHES ".*framework.*")
-        SET(PYTHON_LIBRARIES "${PYTHON_PREFIX}/Python"
-            CACHE FILEPATH "Python libraries"
-            FORCE)
-    ELSE()
-        IF(WIN32)
-            set(PYTHON_LIBRARY_NAME python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR})
-        ELSE()
-            execute_process(COMMAND ${PYTHON_EXECUTABLE} -c
-                             "from distutils.sysconfig import *; print(get_config_var('LDLIBRARY'))"
-                              OUTPUT_VARIABLE PYTHON_LIBRARY_NAME OUTPUT_STRIP_TRAILING_WHITESPACE)
-            execute_process(COMMAND ${PYTHON_EXECUTABLE} -c
-                             "from distutils.sysconfig import *; print(get_config_var('LIBDIR'))"
-                               OUTPUT_VARIABLE PYTHON_LIBRARY_PREFIX OUTPUT_STRIP_TRAILING_WHITESPACE)
-        ENDIF()
-        FIND_LIBRARY(PYTHON_LIBRARIES ${PYTHON_LIBRARY_NAME} HINTS "${PYTHON_LIBRARY_PREFIX}" "${PYTHON_PREFIX}"
-                     PATH_SUFFIXES lib lib64 libs DOC "Python libraries")
-        unset(PYTHON_LIBRARY_PREFIX)
-    ENDIF()
-
-    IF(PYTHON_LIBRARIES)
-        MESSAGE(STATUS "Found Python library: ${PYTHON_LIBRARIES}")
-    ELSE()
-        MESSAGE(STATUS "Could NOT find Python library (looking for version ${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR})")
-    ENDIF()
-
     ######################################################################
     #
     #      find boost::python library
@@ -94,15 +36,15 @@ IF(PYTHONINTERP_FOUND)
         IF(Boost_USE_MULTITHREADED)
             # define names for thread-safe library variants
             SET(BOOST_PYTHON_NAMES
-                    boost_python-py${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}-mt
-                    boost_python-${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}-mt
-                    boost_python${PYTHON_VERSION_MAJOR}-mt
+                    boost_python-py${Python_VERSION_MAJOR}${Python_VERSION_MINOR}-mt
+                    boost_python-${Python_VERSION_MAJOR}.${Python_VERSION_MINOR}-mt
+                    boost_python${Python_VERSION_MAJOR}-mt
                     boost_python-mt)
         ENDIF()
         IF(Boost_LIB_SUFFIX)
             SET(BOOST_PYTHON_NAMES ${BOOST_PYTHON_NAMES}
                 # Windows with mangled library names
-                boost_python${PYTHON_VERSION_MAJOR}${Boost_LIB_SUFFIX}
+                boost_python${Python_VERSION_MAJOR}${Boost_LIB_SUFFIX}
                 boost_python${Boost_LIB_SUFFIX})
         ENDIF()
 
@@ -110,13 +52,13 @@ IF(PYTHONINTERP_FOUND)
         # (may or may not be thread-safe)
         SET(BOOST_PYTHON_NAMES ${BOOST_PYTHON_NAMES}
                 # Linux with multiple Python versions
-                boost_python-py${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}
+                boost_python-py${Python_VERSION_MAJOR}${Python_VERSION_MINOR}
                 # Gentoo
-                boost_python-${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}
+                boost_python-${Python_VERSION_MAJOR}.${Python_VERSION_MINOR}
                 # Mac with Python 3
-                boost_python${PYTHON_VERSION_MAJOR}
+                boost_python${Python_VERSION_MAJOR}
                 # conda-forge
-                boost_python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}
+                boost_python${Python_VERSION_MAJOR}${Python_VERSION_MINOR}
                 # default
                 boost_python)
 
@@ -130,7 +72,7 @@ IF(PYTHONINTERP_FOUND)
     if(Boost_PYTHON_LIBRARY)
         MESSAGE(STATUS "Found boost_python library: ${Boost_PYTHON_LIBRARY}")
     else()
-        MESSAGE(STATUS "Could NOT find boost_python library (looking for version ${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR})")
+        MESSAGE(STATUS "Could NOT find boost_python library (looking for version ${Python_VERSION_MAJOR}.${Python_VERSION_MINOR})")
     endif()
 
     ######################################################################
@@ -140,7 +82,7 @@ IF(PYTHONINTERP_FOUND)
     #
     ######################################################################
     IF(NOT DEFINED VIGRANUMPY_INSTALL_DIR OR VIGRANUMPY_INSTALL_DIR MATCHES "^$")
-        execute_process(COMMAND ${PYTHON_EXECUTABLE} -c
+        execute_process(COMMAND ${Python_EXECUTABLE} -c
                          "from distutils.sysconfig import *; print(get_python_lib(1))"
                           OUTPUT_VARIABLE PYTHON_SITE_PACKAGES OUTPUT_STRIP_TRAILING_WHITESPACE)
         FILE(TO_CMAKE_PATH ${PYTHON_SITE_PACKAGES} VIGRANUMPY_INSTALL_DIR)
@@ -151,41 +93,12 @@ IF(PYTHONINTERP_FOUND)
     # use this in INSTALL() commands to get packaging right
     FILE(RELATIVE_PATH VIGRANUMPY_INSTALL_DIR ${CMAKE_INSTALL_PREFIX} ${VIGRANUMPY_INSTALL_DIR})
 
-    ######################################################################
-    #
-    #      find numpy include directory
-    #      (usually below PYTHONDIR/Lib/site-packages/numpy)
-    #
-    ######################################################################
-    IF(NOT PYTHON_NUMPY_INCLUDE_DIR)
-        # Note: we must suppress possible output of the 'from numpy... import *' command,
-        #       because the output cannot be interpreted correctly otherwise
-        execute_process(COMMAND ${PYTHON_EXECUTABLE} -c
-                         "import sys, os; sys.stdout = open(os.devnull, 'w'); from numpy.distutils.misc_util import *; sys.__stdout__.write(' '.join(get_numpy_include_dirs()))"
-                          RESULT_VARIABLE PYTHON_NUMPY_NOT_FOUND
-                          OUTPUT_VARIABLE PYTHON_NUMPY_INCLUDE_DIR
-                          OUTPUT_STRIP_TRAILING_WHITESPACE)
-        IF(NOT PYTHON_NUMPY_NOT_FOUND)
-            FILE(TO_CMAKE_PATH ${PYTHON_NUMPY_INCLUDE_DIR} PYTHON_NUMPY_INCLUDE_DIR)
-        ELSE()
-            SET(PYTHON_NUMPY_INCLUDE_DIR "PYTHON_NUMPY_INCLUDE_DIR-NOTFOUND")
-        ENDIF()
-    ENDIF()
-
-    SET(PYTHON_NUMPY_INCLUDE_DIR ${PYTHON_NUMPY_INCLUDE_DIR}
-        CACHE PATH "Path to numpy include files" FORCE)
-    IF(PYTHON_NUMPY_INCLUDE_DIR)
-        MESSAGE(STATUS "Searching for Python numpy: ok")
-    ELSE()
-        MESSAGE(STATUS "Could NOT find Python numpy ('import numpy.distutils.misc_util' failed)")
-    ENDIF()
-
     ######################################################################
     #
     #      check if nosetests are installed
     #
     ######################################################################
-    execute_process(COMMAND ${PYTHON_EXECUTABLE} -c
+    execute_process(COMMAND ${Python_EXECUTABLE} -c
                      "import nose"
                       RESULT_VARIABLE PYTHON_NOSETESTS_NOT_FOUND)
 
@@ -213,7 +126,7 @@ IF(PYTHONINTERP_FOUND)
     #      find Python platform
     #
     ######################################################################
-    execute_process(COMMAND ${PYTHON_EXECUTABLE} -c
+    execute_process(COMMAND ${Python_EXECUTABLE} -c
                      "import sys; p = sys.platform; print('windows') if p.startswith('win') else p"
                       OUTPUT_VARIABLE PYTHON_PLATFORM OUTPUT_STRIP_TRAILING_WHITESPACE)
 
@@ -224,19 +137,19 @@ IF(PYTHONINTERP_FOUND)
     ######################################################################
     INCLUDE(FindPackageHandleStandardArgs)
     FIND_PACKAGE_HANDLE_STANDARD_ARGS(VIGRANUMPY_DEPENDENCIES DEFAULT_MSG
-                         PYTHONINTERP_FOUND PYTHON_INCLUDE_PATH PYTHON_LIBRARIES
-                         Boost_PYTHON_LIBRARY PYTHON_NUMPY_INCLUDE_DIR VIGRANUMPY_INSTALL_DIR)
+                         Python_Interpreter_FOUND Python_INCLUDE_DIRS Python_LIBRARIES
+                         Boost_PYTHON_LIBRARY Python_NumPy_INCLUDE_DIRS VIGRANUMPY_INSTALL_DIR)
 
     IF(NOT VIGRANUMPY_INCLUDE_DIRS OR VIGRANUMPY_INCLUDE_DIRS MATCHES "-NOTFOUND")
         #note that the numpy include dir is set _before_ the python include dir, such that
         #installing a more recent version of numpy on top of an existing python installation
         #works (otherwise, numpy includes are picked up from ${PYTHON_INCLUDE_PATH}/numpy )
-        SET(VIGRANUMPY_INCLUDE_DIRS ${PYTHON_NUMPY_INCLUDE_DIR} ${PYTHON_INCLUDE_PATH} ${Boost_INCLUDE_DIR})
+        SET(VIGRANUMPY_INCLUDE_DIRS ${Python_NumPy_INCLUDE_DIRS} ${Python_INCLUDE_DIRS} ${Boost_INCLUDE_DIR})
     ENDIF()
     SET(VIGRANUMPY_INCLUDE_DIRS ${VIGRANUMPY_INCLUDE_DIRS}
         CACHE PATH "include directories needed by VIGRA Python bindings"
         FORCE)
-    SET(VIGRANUMPY_LIBRARIES ${PYTHON_LIBRARIES} ${Boost_PYTHON_LIBRARY})
+    SET(VIGRANUMPY_LIBRARIES ${Python_LIBRARIES} ${Boost_PYTHON_LIBRARY})
 
     if(TEST_VIGRANUMPY AND NOT VIGRANUMPY_DEPENDENCIES_FOUND)
         MESSAGE(FATAL_ERROR "  vigranumpy dependencies NOT found while TEST_VIGRANUMPY=1")
@@ -245,5 +158,5 @@ IF(PYTHONINTERP_FOUND)
         MESSAGE(FATAL_ERROR "  nosetests NOT found while TEST_VIGRANUMPY=1")
     endif()
 ELSE()
-    MESSAGE(STATUS "Python not found. Make sure that Python is in your PATH or use 'cmake-gui' to set the PYTHON_EXECUTABLE variable manually.")
+    MESSAGE(STATUS "Python not found. Make sure that Python is in your PATH or set the appropriate variables as described in https://cmake.org/cmake/help/latest/module/FindPython.html")
 ENDIF()
diff --git a/config/VIGRA_ADD_NUMPY_MODULE.cmake b/config/VIGRA_ADD_NUMPY_MODULE.cmake
index 50b238317..e4e406377 100644
--- a/config/VIGRA_ADD_NUMPY_MODULE.cmake
+++ b/config/VIGRA_ADD_NUMPY_MODULE.cmake
@@ -64,6 +64,15 @@ FUNCTION(VIGRA_ADD_NUMPY_MODULE target)
         SET_TARGET_PROPERTIES(vigranumpy PROPERTIES VIGRA_DEPENDS "${VIGRANUMPY_DEPENDS} ${TARGET_NAME}")
     ENDIF()
 
+    ######################################################################
+    #
+    #      find Python EXT SUFFIX for compatibility with PyPy and CPython
+    #
+    ######################################################################
+    execute_process(COMMAND ${Python_EXECUTABLE} -c
+                     "import sysconfig; print(sysconfig.get_config_var('EXT_SUFFIX'))"
+                     OUTPUT_VARIABLE EXT_SUFFIX OUTPUT_STRIP_TRAILING_WHITESPACE)
+
     if(DEFINED LIBRARIES)
         TARGET_LINK_LIBRARIES(${TARGET_NAME} ${LIBRARIES})
     endif()
@@ -72,17 +81,17 @@ FUNCTION(VIGRA_ADD_NUMPY_MODULE target)
 
     IF(PYTHON_PLATFORM MATCHES "^windows$")
         SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES OUTPUT_NAME "${LIBRARY_NAME}"
-                                                           PREFIX "" SUFFIX  ".pyd")
+                                                           PREFIX "" SUFFIX  ${EXT_SUFFIX})
     ELSEIF(MACOSX)
         IF(${CMAKE_MAJOR_VERSION} LESS 3)
             SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES OUTPUT_NAME "${LIBRARY_NAME}" PREFIX ""
-                              SUFFIX ".so" INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/${VIGRANUMPY_INSTALL_DIR}/vigra")
+                              SUFFIX ${EXT_SUFFIX} INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/${VIGRANUMPY_INSTALL_DIR}/vigra")
         ELSE()
-            SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES OUTPUT_NAME "${LIBRARY_NAME}" PREFIX ""    SUFFIX ".so" )
+            SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES OUTPUT_NAME "${LIBRARY_NAME}" PREFIX ""    SUFFIX ${EXT_SUFFIX} )
         ENDIF()
     ELSE()
         SET_TARGET_PROPERTIES(${TARGET_NAME} PROPERTIES OUTPUT_NAME "${LIBRARY_NAME}"
-                                                           PREFIX "")
+                                                           PREFIX "" SUFFIX ${EXT_SUFFIX})
     ENDIF()
 
     IF(PART_OF_VIGRANUMPY)
diff --git a/docsrc/CMakeLists.txt b/docsrc/CMakeLists.txt
index 41c7fded4..447e7e8fd 100644
--- a/docsrc/CMakeLists.txt
+++ b/docsrc/CMakeLists.txt
@@ -1,4 +1,4 @@
-IF(DOXYGEN_FOUND AND PYTHONINTERP_FOUND)
+IF(DOXYGEN_FOUND AND Python_Interpreter_FOUND)
     execute_process(COMMAND ${DOXYGEN_EXECUTABLE} --version
                   OUTPUT_VARIABLE DOXYGEN_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
 
@@ -27,10 +27,10 @@ IF(DOXYGEN_FOUND AND PYTHONINTERP_FOUND)
     ADD_CUSTOM_COMMAND(
         TARGET doc_cpp
         POST_BUILD
-        COMMAND ${PYTHON_EXECUTABLE}
+        COMMAND ${Python_EXECUTABLE}
             ${CMAKE_CURRENT_SOURCE_DIR}/makeFunctionIndex.py
             ${DOCDIR}/vigra
-        COMMAND ${PYTHON_EXECUTABLE}
+        COMMAND ${Python_EXECUTABLE}
             ${CMAKE_CURRENT_SOURCE_DIR}/post.py
             ${DOCDIR}/vigra
             ${vigra_version}
diff --git a/docsrc/credits_changelog.dxx b/docsrc/credits_changelog.dxx
index 35f89637f..2cfd8fe4b 100644
--- a/docsrc/credits_changelog.dxx
+++ b/docsrc/credits_changelog.dxx
@@ -67,6 +67,8 @@
 
       <li> John Kirkham figured out how to configure Travis to run tests for Python3 and on OS X.
 
+      <li> Mark Harfouche updated CMake configuration to 3.12 enabling compatibility with PyPy.
+
       <li> Philip Schill implemented version 3 of the Random Forest.
 
       <li> David St&ouml;ckel contributed the 3D convex hull functionality.
@@ -77,6 +79,14 @@
 Many thanks to all!
 <p>
 
+<b> Changes from Version 1.11.1 to 1.11.2 (unreleased)</b>
+
+<ul>
+      <li> Updated CMake minimum version to 3.12.
+
+      <li> Added support for PyPy as python runtime (Mark Harfouche).
+</ul>
+
 <b> Changes from Version 1.11.0 to 1.11.1</b>
 
 <ul>
diff --git a/vigranumpy/test/CMakeLists.txt b/vigranumpy/test/CMakeLists.txt
index ec809a417..1c267a5c1 100644
--- a/vigranumpy/test/CMakeLists.txt
+++ b/vigranumpy/test/CMakeLists.txt
@@ -45,13 +45,10 @@ ELSE()
                vigranumpytest.cxx ${TEST_SUCCESS_FILE} ${TEST_SCRIPTS})
 ENDIF()
 
-IF(PYTHON_PLATFORM MATCHES "^windows$")
-    SET_TARGET_PROPERTIES(vigranumpytest PROPERTIES PREFIX "" SUFFIX  ".pyd")
-ELSEIF(MACOSX)
-    SET_TARGET_PROPERTIES(vigranumpytest PROPERTIES PREFIX "" SUFFIX ".so")
-ELSE()
-    SET_TARGET_PROPERTIES(vigranumpytest PROPERTIES PREFIX "")
-ENDIF()
+execute_process(COMMAND ${Python_EXECUTABLE} -c
+                "import sysconfig; print(sysconfig.get_config_var('EXT_SUFFIX'))"
+                OUTPUT_VARIABLE EXT_SUFFIX OUTPUT_STRIP_TRAILING_WHITESPACE)
+SET_TARGET_PROPERTIES(vigranumpytest PROPERTIES PREFIX "" SUFFIX  ${EXT_SUFFIX})
 
 TARGET_LINK_LIBRARIES(vigranumpytest ${VIGRANUMPY_LIBRARIES})
 ADD_DEPENDENCIES(check_python vigranumpytest)
@@ -99,7 +96,7 @@ IF(NOT PYTHON_NOSETESTS_NOT_FOUND)
             COMMENT "Running vigranumpy tests")
     ENDFOREACH(test_script)
 
-    VIGRA_NATIVE_PATH(PYTHON_EXECUTABLE ${PYTHON_EXECUTABLE})
+    VIGRA_NATIVE_PATH(Python_EXECUTABLE ${Python_EXECUTABLE})
 
     # Windows: Set the DLL path to the binaries currently being built
     #          (so that binaries which are already installed are ignored)
@@ -122,8 +119,8 @@ IF(NOT PYTHON_NOSETESTS_NOT_FOUND)
     # properties are only known at generation time (policy CMP0026)
     VIGRA_NATIVE_PATH(VIGRA_CURRENT_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})
     IF(MSVC OR MINGW)
-        get_filename_component(PYTHON_PATH ${PYTHON_EXECUTABLE} PATH)
-        get_filename_component(PYTHON_EXE  ${PYTHON_EXECUTABLE} NAME)
+        get_filename_component(PYTHON_PATH ${Python_EXECUTABLE} PATH)
+        get_filename_component(PYTHON_EXE  ${Python_EXECUTABLE} NAME)
         SET(EXTRA_PATH  "${PYTHON_PATH}${PATHSEP}${EXTRA_PATH}")
         SET(VIGRA_TEST_EXECUTABLE "${PYTHON_EXE} -c \"import nose; nose.main()\" . %CONFIGURATION%")
         SET(VIGRA_TEST_SCRIPT     "${CMAKE_CURRENT_BINARY_DIR}/run_vigranumpytest.bat")
@@ -133,7 +130,7 @@ IF(NOT PYTHON_NOSETESTS_NOT_FOUND)
         file(GENERATE OUTPUT "${VIGRA_TEST_SCRIPT}"
                       INPUT  "${VIGRA_TEST_SCRIPT}.in")
     ELSE()
-        SET(VIGRA_TEST_EXECUTABLE "${PYTHON_EXECUTABLE} -c \"import nose; nose.main()\" .")
+        SET(VIGRA_TEST_EXECUTABLE "${Python_EXECUTABLE} -c \"import nose; nose.main()\" .")
         SET(VIGRA_TEST_SCRIPT     "${CMAKE_CURRENT_BINARY_DIR}/run_vigranumpytest.sh")
         CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/config/run_test.sh.in
                        ${VIGRA_TEST_SCRIPT}.in
@@ -163,7 +160,7 @@ IF(NOT PYTHON_NOSETESTS_NOT_FOUND)
     # if we configure for Visual Studio, setup the debug command
     if(MSVC AND NOT (MSVC_VERSION VERSION_LESS "11"))
         # FIXME: this may not portable between VC versions (works for 11.0 - 14.0)
-        set(VIGRA_TEST_EXE "${PYTHON_EXECUTABLE}")
+        set(VIGRA_TEST_EXE "${Python_EXECUTABLE}")
         set(VIGRA_TEST_ARGS "-c \"import nose; nose.main()\" . \$(Configuration)")
         configure_file(${CMAKE_SOURCE_DIR}/config/testdebug.vcxproj.user.in
                        ${CMAKE_CURRENT_BINARY_DIR}/vigranumpytest.vcxproj.user
diff --git a/vigranumpy/test/test_arraytypes.py b/vigranumpy/test/test_arraytypes.py
index c5764cd97..781ca2168 100644
--- a/vigranumpy/test/test_arraytypes.py
+++ b/vigranumpy/test/test_arraytypes.py
@@ -50,6 +50,8 @@
 from nose.tools import assert_equal, raises, assert_true
 
 from vigra.arraytypes import AxisTags, AxisInfo
+import platform
+IS_PYPY = platform.python_implementation() == 'PyPy'
 
 if sys.version_info[0] > 2:
     def xrange(*args):
@@ -94,7 +96,8 @@ def computeVStrides(shape, hasChannelAxis):
 def checkArray(cls, channels, dim, hasChannelAxis=True):
         def testCopy(img):
             b = cls(img, order='A')
-            assert_equal(sys.getrefcount(b), 2)
+            if not IS_PYPY:
+                assert_equal(sys.getrefcount(b), 2)
             assert b.__class__ is img.__class__
             assert_equal(b.shape, img.shape)
             assert_equal(b.strides, img.strides)
@@ -104,7 +107,8 @@ def testCopy(img):
             assert (b == img).all()
             assert not numpy.may_share_memory(b, img)
             b = img.copy(order='A')
-            assert_equal(sys.getrefcount(b), 2)
+            if not IS_PYPY:
+                assert_equal(sys.getrefcount(b), 2)
             assert_equal(b.shape, img.shape)
             assert_equal(b.strides, img.strides)
             assert_equal(b.order, img.order)
@@ -145,7 +149,8 @@ def testCopy(img):
 #        assert type(img) is cls
         assert isinstance(img, numpy.ndarray)
         assert_equal(img.dtype, numpy.float32)
-        assert_equal(sys.getrefcount(img), 2)
+        if not IS_PYPY:
+            assert_equal(sys.getrefcount(img), 2)
 
         # test shape
         checkShape(img.shape, vshape)
@@ -211,7 +216,8 @@ def testCopy(img):
 
         # test shape, strides, and copy for 'F' order
         img = cls(fshape, order='F')
-        assert_equal(sys.getrefcount(img), 2)
+        if not IS_PYPY:
+            assert_equal(sys.getrefcount(img), 2)
         checkShape(img.shape, fshape)
         checkStride(img.strides, ffstrides)
         assert_equal(img.axistags, faxistags)
@@ -241,7 +247,8 @@ def testCopy(img):
 
         # test shape, strides, and copy for 'A' order (should be equal to 'V' order)
         img = cls(vshape, order='A')
-        assert_equal(sys.getrefcount(img), 2)
+        if not IS_PYPY:
+            assert_equal(sys.getrefcount(img), 2)
         checkShape(img.shape, vshape)
         checkStride(img.strides, fvstrides)
         if channels > 1:
@@ -261,7 +268,8 @@ def testCopy(img):
 
         # test shape, strides, and copy for 'C' order
         img = cls(cshape, order='C')
-        assert_equal(sys.getrefcount(img), 2)
+        if not IS_PYPY:
+            assert_equal(sys.getrefcount(img), 2)
         checkShape(img.shape, cshape)
         checkStride(img.strides, fcstrides)
         assert_equal(img.axistags, caxistags)
@@ -292,7 +300,8 @@ def testCopy(img):
         # test shape, strides, and copy for dtype uint8
         img = cls(vshape, order="V")
         b = cls(img, dtype=numpy.uint8, order='V')
-        assert_equal(sys.getrefcount(b), 2)
+        if not IS_PYPY:
+            assert_equal(sys.getrefcount(b), 2)
         assert_equal(b.dtype, numpy.uint8)
         checkShape(b.shape, img.shape)
         checkStride(b.strides, computeVStrides(b.shape, hasChannelAxis))
@@ -315,7 +324,8 @@ def testCopy(img):
 
         img = cls(cshape, order="C")
         b = cls(img, dtype=numpy.uint8, order='C')
-        assert_equal(sys.getrefcount(b), 2)
+        if not IS_PYPY:
+            assert_equal(sys.getrefcount(b), 2)
         checkShape(b.shape, img.shape)
         checkStride(b.strides, computeCStrides(b.shape))
         assert_equal(b.axistags, img.axistags)
@@ -332,7 +342,8 @@ def testCopy(img):
 
         img = cls(fshape, order="F")
         b = cls(img, dtype=numpy.uint8, order='F')
-        assert_equal(sys.getrefcount(b), 2)
+        if not IS_PYPY:
+            assert_equal(sys.getrefcount(b), 2)
         checkShape(b.shape, img.shape)
         checkStride(b.strides, computeFStrides(b.shape))
         assert_equal(b.axistags, img.axistags)
diff --git a/vigranumpy/test/vigranumpytest.cxx b/vigranumpy/test/vigranumpytest.cxx
index 863d60094..8f46570b9 100644
--- a/vigranumpy/test/vigranumpytest.cxx
+++ b/vigranumpy/test/vigranumpytest.cxx
@@ -59,8 +59,12 @@ python::tuple test(NumpyArray<N, T, Stride> const & array)
     NumpyAnyArray anyarray(array);
     
     NumpyArray<N, T> copy(array, true);
+#ifndef PYPY_VERSION
+// PyPy Doesn't support reference counting the same way that CPython does
+// therefore skip this test
     vigra_postcondition(copy.pyObject()->ob_refcnt == 1, 
           "freshly created NumpyArray<N, T> has reference count > 1.");
+#endif
 
     NumpyArray<N, T> same_shape(array.shape());
     same_shape = array;
